import "@expo/browser-polyfill";
import * as filters from "pixi-filters";
import * as PIXIInstance from "pixi.js";
declare class PIXIApplication extends PIXIInstance.Application {
    constructor({ context, width, height, resolution, ...props }: {
        [x: string]: any;
        context: any;
        width: any;
        height: any;
        resolution: any;
    });
}
declare class PIXISprite extends PIXIInstance.Sprite {
    static from(asset: any): any;
}
declare class PIXITexture extends PIXIInstance.Texture {
    static from(asset: any): any;
}
export declare const PIXI: {
    filters: {
        AlphaFilter: typeof filters.AlphaFilter;
        BlurFilter: typeof filters.BlurFilter;
        BlurFilterPass: typeof filters.BlurFilterPass;
        ColorMatrixFilter: typeof filters.ColorMatrixFilter;
        DisplacementFilter: typeof filters.DisplacementFilter;
        FXAAFilter: typeof filters.FXAAFilter;
        NoiseFilter: typeof filters.NoiseFilter;
        AdjustmentFilter: typeof filters.AdjustmentFilter;
        AdvancedBloomFilter: typeof filters.AdvancedBloomFilter;
        AsciiFilter: typeof filters.AsciiFilter;
        BevelFilter: typeof filters.BevelFilter;
        BloomFilter: typeof filters.BloomFilter;
        BulgePinchFilter: typeof filters.BulgePinchFilter;
        ColorMapFilter: typeof filters.ColorMapFilter;
        ColorReplaceFilter: typeof filters.ColorReplaceFilter;
        ConvolutionFilter: typeof filters.ConvolutionFilter;
        CrossHatchFilter: typeof filters.CrossHatchFilter;
        CRTFilter: typeof filters.CRTFilter;
        DotFilter: typeof filters.DotFilter;
        DropShadowFilter: typeof filters.DropShadowFilter;
        EmbossFilter: typeof filters.EmbossFilter;
        GlitchFilter: typeof filters.GlitchFilter;
        GlowFilter: typeof filters.GlowFilter;
        GodrayFilter: typeof filters.GodrayFilter;
        KawaseBlurFilter: typeof filters.KawaseBlurFilter;
        MotionBlurFilter: typeof filters.MotionBlurFilter;
        MultiColorReplaceFilter: typeof filters.MultiColorReplaceFilter;
        OldFilmFilter: typeof filters.OldFilmFilter;
        OutlineFilter: typeof filters.OutlineFilter;
        PixelateFilter: typeof filters.PixelateFilter;
        RadialBlurFilter: typeof filters.RadialBlurFilter;
        ReflectionFilter: typeof filters.ReflectionFilter;
        RGBSplitFilter: typeof filters.RGBSplitFilter;
        ShockwaveFilter: typeof filters.ShockwaveFilter;
        SimpleLightmapFilter: typeof filters.SimpleLightmapFilter;
        TiltShiftFilter: typeof filters.TiltShiftFilter;
        TwistFilter: typeof filters.TwistFilter;
        ZoomBlurFilter: typeof filters.ZoomBlurFilter;
    };
    Application: typeof PIXIApplication;
    Texture: typeof PIXITexture;
    Sprite: typeof PIXISprite;
    autoDetectRenderer(options?: {
        width?: number | undefined;
        height?: number | undefined;
        view?: HTMLCanvasElement | undefined;
        transparent?: boolean | undefined;
        autoDensity?: boolean | undefined;
        antialias?: boolean | undefined;
        preserveDrawingBuffer?: boolean | undefined;
        backgroundColor?: number | undefined;
        clearBeforeRender?: boolean | undefined;
        resolution?: number | undefined;
        forceCanvas?: boolean | undefined;
        forceFXAA?: boolean | undefined;
        powerPreference?: string | undefined;
    } | undefined): PIXIInstance.Renderer;
    VERSION: string;
    accessibility: typeof PIXIInstance.accessibility;
    ENV: typeof PIXIInstance.ENV;
    RENDERER_TYPE: typeof PIXIInstance.RENDERER_TYPE;
    BLEND_MODES: typeof PIXIInstance.BLEND_MODES;
    DRAW_MODES: typeof PIXIInstance.DRAW_MODES;
    FORMATS: typeof PIXIInstance.FORMATS;
    TARGETS: typeof PIXIInstance.TARGETS;
    TYPES: typeof PIXIInstance.TYPES;
    SCALE_MODES: typeof PIXIInstance.SCALE_MODES;
    WRAP_MODES: typeof PIXIInstance.WRAP_MODES;
    MIPMAP_MODES: typeof PIXIInstance.MIPMAP_MODES;
    ALPHA_MODES: typeof PIXIInstance.ALPHA_MODES;
    GC_MODES: typeof PIXIInstance.GC_MODES;
    PRECISION: typeof PIXIInstance.PRECISION;
    MASK_TYPES: typeof PIXIInstance.MASK_TYPES;
    AbstractRenderer: typeof PIXIInstance.AbstractRenderer;
    Renderer: typeof PIXIInstance.Renderer;
    System: typeof PIXIInstance.System;
    AbstractBatchRenderer: typeof PIXIInstance.AbstractBatchRenderer;
    BatchDrawCall: typeof PIXIInstance.BatchDrawCall;
    BatchGeometry: typeof PIXIInstance.BatchGeometry;
    BatchPluginFactory: typeof PIXIInstance.BatchPluginFactory;
    BatchShaderGenerator: typeof PIXIInstance.BatchShaderGenerator;
    BatchTextureArray: typeof PIXIInstance.BatchTextureArray;
    ObjectRenderer: typeof PIXIInstance.ObjectRenderer;
    Filter: typeof PIXIInstance.Filter;
    SpriteMaskFilter: typeof PIXIInstance.SpriteMaskFilter;
    defaultVertex: string;
    defaultFilterVertex: string;
    Framebuffer: typeof PIXIInstance.Framebuffer;
    Attribute: typeof PIXIInstance.Attribute;
    Buffer: typeof PIXIInstance.Buffer;
    Geometry: typeof PIXIInstance.Geometry;
    ViewableBuffer: typeof PIXIInstance.ViewableBuffer;
    MaskData: typeof PIXIInstance.MaskData;
    BaseRenderTexture: typeof PIXIInstance.BaseRenderTexture;
    RenderTexture: typeof PIXIInstance.RenderTexture;
    RenderTexturePool: typeof PIXIInstance.RenderTexturePool;
    GLProgram: typeof PIXIInstance.GLProgram;
    Program: typeof PIXIInstance.Program;
    Shader: typeof PIXIInstance.Shader;
    UniformGroup: typeof PIXIInstance.UniformGroup;
    State: typeof PIXIInstance.State;
    systems: typeof PIXIInstance.systems;
    BaseTexture: typeof PIXIInstance.BaseTexture;
    CubeTexture: typeof PIXIInstance.CubeTexture;
    GLTexture: typeof PIXIInstance.GLTexture;
    TextureMatrix: typeof PIXIInstance.TextureMatrix;
    TextureUvs: typeof PIXIInstance.TextureUvs;
    resources: typeof PIXIInstance.resources;
    Quad: typeof PIXIInstance.Quad;
    QuadUv: typeof PIXIInstance.QuadUv;
    Bounds: typeof PIXIInstance.Bounds;
    Container: typeof PIXIInstance.Container;
    DisplayObject: typeof PIXIInstance.DisplayObject;
    Extract: typeof PIXIInstance.Extract;
    Graphics: typeof PIXIInstance.Graphics;
    GraphicsData: typeof PIXIInstance.GraphicsData;
    GraphicsGeometry: typeof PIXIInstance.GraphicsGeometry;
    GRAPHICS_CURVES: {
        adaptive: boolean;
        maxLength: number;
        minSegments: number;
        maxSegments: number;
    };
    FillStyle: typeof PIXIInstance.FillStyle;
    LineStyle: typeof PIXIInstance.LineStyle;
    Star: typeof PIXIInstance.Star;
    graphicsUtils: typeof PIXIInstance.graphicsUtils;
    interaction: typeof PIXIInstance.interaction;
    AppLoaderPlugin: typeof PIXIInstance.AppLoaderPlugin;
    Loader: typeof PIXIInstance.Loader;
    TextureLoader: typeof PIXIInstance.TextureLoader;
    LoaderResource: typeof PIXIInstance.LoaderResource;
    Matrix: typeof PIXIInstance.Matrix;
    ObservablePoint: typeof PIXIInstance.ObservablePoint;
    Point: typeof PIXIInstance.Point;
    Transform: typeof PIXIInstance.Transform;
    SHAPES: typeof PIXIInstance.SHAPES;
    PI_2: number;
    RAD_TO_DEG: number;
    DEG_TO_RAD: number;
    groupD8: typeof PIXIInstance.groupD8;
    Circle: typeof PIXIInstance.Circle;
    Ellipse: typeof PIXIInstance.Ellipse;
    Polygon: typeof PIXIInstance.Polygon;
    Rectangle: typeof PIXIInstance.Rectangle;
    RoundedRectangle: typeof PIXIInstance.RoundedRectangle;
    Mesh: typeof PIXIInstance.Mesh;
    MeshBatchUvs: typeof PIXIInstance.MeshBatchUvs;
    MeshGeometry: typeof PIXIInstance.MeshGeometry;
    MeshMaterial: typeof PIXIInstance.MeshMaterial;
    NineSlicePlane: typeof PIXIInstance.NineSlicePlane;
    SimpleMesh: typeof PIXIInstance.SimpleMesh;
    SimplePlane: typeof PIXIInstance.SimplePlane;
    SimpleRope: typeof PIXIInstance.SimpleRope;
    RopeGeometry: typeof PIXIInstance.RopeGeometry;
    ParticleContainer: typeof PIXIInstance.ParticleContainer;
    ParticleRenderer: typeof PIXIInstance.ParticleRenderer;
    BasePrepare: typeof PIXIInstance.BasePrepare;
    CountLimiter: typeof PIXIInstance.CountLimiter;
    Prepare: typeof PIXIInstance.Prepare;
    TimeLimiter: typeof PIXIInstance.TimeLimiter;
    Runner: typeof PIXIInstance.Runner;
    settings: typeof PIXIInstance.settings;
    AnimatedSprite: typeof PIXIInstance.AnimatedSprite;
    TilingSprite: typeof PIXIInstance.TilingSprite;
    TilingSpriteRenderer: typeof PIXIInstance.TilingSpriteRenderer;
    Spritesheet: typeof PIXIInstance.Spritesheet;
    SpritesheetLoader: typeof PIXIInstance.SpritesheetLoader;
    Text: typeof PIXIInstance.Text;
    TextMetrics: typeof PIXIInstance.TextMetrics;
    TextStyle: typeof PIXIInstance.TextStyle;
    TEXT_GRADIENT: {
        LINEAR_VERTICAL: number;
        LINEAR_HORIZONTAL: number;
    };
    BitmapFontLoader: typeof PIXIInstance.BitmapFontLoader;
    BitmapText: typeof PIXIInstance.BitmapText;
    Ticker: typeof PIXIInstance.Ticker;
    TickerPlugin: typeof PIXIInstance.TickerPlugin;
    UPDATE_PRIORITY: typeof PIXIInstance.UPDATE_PRIORITY;
    DATA_URI: string | RegExp;
    utils: typeof PIXIInstance.utils;
};
export {};
